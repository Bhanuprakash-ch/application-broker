/**
 * Copyright (c) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package extension

import (
	log "github.com/cihub/seelog"
	cf "github.com/cloudfoundry-community/types-cf"
	"github.com/nu7hatch/gouuid"
	"github.com/trustedanalytics/go-cf-lib/types"
)

type ServiceConfiguration struct {
	ServiceName string   `json:"service_name"`
	Params      []string `json:"parameters"`
}

// ServiceExtension extends cf.Service with data describing application to clone.
type ServiceExtension struct {
	cf.Service
	ReferenceApp  types.CfAppResource     `json:"app"`
	Configuration []*ServiceConfiguration `json:"configuration,omitempty"`
}

type ServiceInstanceExtension struct {
	ID        string              `json:"id"`
	ServiceID string              `json:"service_id"`
	App       types.CfAppResource `json:"app"`
}

type ServiceCreationResponse struct {
	cf.ServiceCreationResponse
	App types.CfAppResource `json:"-"`
}

func NewAutogeneratedService() *ServiceExtension {
	to_return := new(ServiceExtension)
	service_guid, _ := uuid.NewV4()
	plan_guid, _ := uuid.NewV4()

	to_return.ID = service_guid.String()
	to_return.Plans = []*cf.Plan{}
	to_return.Bindable = true
	default_plan := &cf.Plan{ID: plan_guid.String(), Name: "Simple", Description: "SimplePlan"}
	to_return.Plans = append(to_return.Plans, default_plan)

	return to_return
}

func Validate(svc *ServiceExtension) bool {
	if len(svc.Name) == 0 {
		log.Warn("Service name is empty")
		return false
	}
	if len(svc.Description) == 0 {
		log.Warn("Service description is empty")
		return false
	}
	if len(svc.ReferenceApp.Meta.GUID) == 0 {
		log.Warn("Reference app GUID is empty")
		return false
	}
	return true
}
